<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic9">
  <title>How Greenplum Database Detects a Failed Segment</title>
  <body>
    <p>With segment mirroring enabled, Greenplum Database automatically fails over to a mirror
      segment instance when a primary segment instance goes down. Provided one segment instance is
      online per portion of data, users may not realize a segment is down. If a transaction is in
      progress when a fault occurs, the in-progress transaction rolls back and restarts
      automatically on the reconfigured set of segments. The <codeph><xref
          href="../../../utility_guide/ref/gpstate.xml#topic1" type="topic"
          format="dita"/></codeph> utility can be used to identify failed segments. The utility
      displays information from the catalog tables including <codeph><xref
          href="../../../ref_guide/system_catalogs/gp_segment_configuration.xml"/></codeph>. </p>
    <p>If the entire Greenplum Database system becomes nonoperational due to a segment failure (for
      example, if mirroring is not enabled or not enough segments are online to access all user
      data), users will see errors when trying to connect to a database. The errors returned to the
      client program may indicate the failure. For example:</p>
    <codeblock>ERROR: All segment databases are unavailable</codeblock>
    <section>
      <title>How a Segment Failure is Detected and Managed</title>
      <p>On the Greenplum Database master host, the Postgres <codeph>postmaster</codeph> process
        forks a fault probe process, <codeph>ftsprobe</codeph>. This is also known as the FTS (Fault
        Tolerance Server) process. The <codeph>postmaster</codeph> process restarts the FTS if it
        fails. </p>
      <p dir="ltr">The FTS runs in a loop with a sleep interval between each cycle. On each loop,
        the FTS probes each primary segment instance by making a TCP socket connection to the
        segment instance using the hostname and port registered in the
          <codeph>gp_segment_configuration</codeph> table. If the connection succeeds, the segment
        performs a few simple checks and reports back to the FTS. The checks include running a
          <codeph>stat</codeph> system call on critical segment directories and checking for
        internal faults in the segment instance. If no issues are detected, a positive reply is sent
        to the FTS and no action is taken for that segment instance. </p>
      <p dir="ltr">If the connection cannot be made, or if a reply is not received in the timeout
        period, then a retry is attempted for the segment instance. If the configured maximum number
        of probe attempts fail, the FTS probes the segment's mirror to ensure that it is up, and
        then updates the <codeph>gp_segment_configuration</codeph> table, marking the primary
        segment "down" and setting the mirror to act as the primary. The FTS updates the
            <codeph><xref href="../../../ref_guide/system_catalogs/gp_configuration_history.xml"
          /></codeph> table with the operations performed.</p>
      <p dir="ltr">When there is only an active primary segment and the corresponding mirror is
        down, the primary goes into the <i>Not In Sync</i> state and continues logging database
        changes, so the mirror can be synchronized without performing a full copy of data from the
        primary to the mirror.</p>
    </section>
    <section>
      <title>Configuring FTS Behavior</title>
      <p>There is a set of server configuration parameters that affect FTS behavior:<parml>
          <plentry>
            <pt>gp_fts_probe_interval</pt>
            <pd>How often, in seconds, to begin a new FTS loop. For example if the setting is 60 and
              the probe loop takes 10 seconds, the FTS process sleeps 50 seconds. If the setting is
              60 and probe loop takes 75 seconds, the process sleeps 0 seconds. The default is 60,
              and the maximum is 3600. </pd>
          </plentry>
          <plentry>
            <pt>gp_fts_probe_timeout</pt>
            <pd>Probe timeout between master and segment, in seconds. The default is 20, and the
              maximum is 3600. </pd>
          </plentry>
          <plentry>
            <pt>gp_fts_probe_retries</pt>
            <pd>The number of attempts to probe a segment. For example if the setting is 5 there
              will be 4 retries after the first attempt fails. Default: 5 </pd>
          </plentry>
          <plentry>
            <pt>gp_log_fts</pt>
            <pd>Logging level for FTS. The value may be "off", "terse", "verbose", or "debug". The
              "verbose" setting can be used in production to provide useful data for
              troubleshooting. The "debug" setting should not be used in production. Default:
              "terse"</pd>
          </plentry>
          <plentry>
            <pt>gp_segment_connect_timeout</pt>
            <pd>The maximum time (in seconds) allowed for a mirror to respond. Default: 180 (3
              minutes)</pd>
          </plentry>
        </parml></p>
      <p>In addition to the fault checking performed by the FTS, a primary segment that is unable to
        send data to its mirror can change the status of the mirror to down. The primary queues up
        the data and after <codeph>gp_segment_connect_timeout</codeph> seconds pass, indicates a
        mirror failure, causing the mirror to be marked down and the primary to go into <codeph>Not In Sync</codeph>
        mode.</p>
    </section>
  </body>
</topic>
